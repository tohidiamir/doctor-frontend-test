[{"D:\\react\\doctor-frontend\\src\\App.js":"1","D:\\react\\doctor-frontend\\src\\index.js":"2","D:\\react\\doctor-frontend\\src\\router\\router.js":"3","D:\\react\\doctor-frontend\\src\\hoc\\Wrapper\\Wrapper.js":"4","D:\\react\\doctor-frontend\\src\\router\\routerTypes.js":"5","D:\\react\\doctor-frontend\\src\\container\\index\\IndexPage.js":"6","D:\\react\\doctor-frontend\\src\\hoc\\Layout\\Layout.js":"7","D:\\react\\doctor-frontend\\src\\container\\doctor\\DoctorPage.js":"8","D:\\react\\doctor-frontend\\src\\component\\Doctor\\DoctorAdd\\SelectTimeRange.js":"9","D:\\react\\doctor-frontend\\src\\component\\Doctor\\DoctorAdd\\DoctorAdd.js":"10","D:\\react\\doctor-frontend\\src\\reportWebVitals.js":"11","D:\\react\\doctor-frontend\\src\\services\\AxoisOrder\\AxoisOrder.js":"12","D:\\react\\doctor-frontend\\src\\services\\AxoisOrder\\AxoisOrderWithAuth.js":"13","D:\\react\\doctor-frontend\\src\\component\\Patient\\PatientSelect\\PatientSelectDoctor.js":"14","D:\\react\\doctor-frontend\\src\\component\\Patient\\PatientSelect\\PatientSelectTime.js":"15"},{"size":634,"mtime":1611134123598,"results":"16","hashOfConfig":"17"},{"size":626,"mtime":1611140254715,"results":"18","hashOfConfig":"17"},{"size":1067,"mtime":1611405050450,"results":"19","hashOfConfig":"17"},{"size":69,"mtime":1564990616404,"results":"20","hashOfConfig":"17"},{"size":141,"mtime":1611215891439,"results":"21","hashOfConfig":"17"},{"size":199,"mtime":1611133384072,"results":"22","hashOfConfig":"17"},{"size":720,"mtime":1611134306446,"results":"23","hashOfConfig":"17"},{"size":272,"mtime":1611142873959,"results":"24","hashOfConfig":"17"},{"size":2901,"mtime":1611209034227,"results":"25","hashOfConfig":"17"},{"size":6791,"mtime":1611214939372,"results":"26","hashOfConfig":"17"},{"size":362,"mtime":1611128000864,"results":"27","hashOfConfig":"17"},{"size":1030,"mtime":1611212209240,"results":"28","hashOfConfig":"17"},{"size":458,"mtime":1611210203757,"results":"29","hashOfConfig":"17"},{"size":6424,"mtime":1611562116551,"results":"30","hashOfConfig":"17"},{"size":1786,"mtime":1611561641971,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},"nzpb5r",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"37"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\react\\doctor-frontend\\src\\App.js",["66"],"import logo from './logo.svg';\nimport './App.css';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\nimport * as RouteLists from './router/router'\nimport Layout from './hoc/Layout/Layout'\n\nfunction App() {\n\n  let routerList = RouteLists.RouteAll.map((key) => {\n    return <Route\n        key={key.name}\n        path={key.path}\n        render={key.render}/>\n\n  });\n\n  let routes = (\n      <BrowserRouter>\n        <Switch>\n          {routerList}\n        </Switch>\n      </BrowserRouter>\n  )\n\n  return (\n    <div className=\"App\">\n\n        <Layout>\n            {routes}\n        </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","D:\\react\\doctor-frontend\\src\\index.js",[],["67","68"],"D:\\react\\doctor-frontend\\src\\router\\router.js",[],"D:\\react\\doctor-frontend\\src\\hoc\\Wrapper\\Wrapper.js",[],"D:\\react\\doctor-frontend\\src\\router\\routerTypes.js",[],"D:\\react\\doctor-frontend\\src\\container\\index\\IndexPage.js",[],"D:\\react\\doctor-frontend\\src\\hoc\\Layout\\Layout.js",[],"D:\\react\\doctor-frontend\\src\\container\\doctor\\DoctorPage.js",[],"D:\\react\\doctor-frontend\\src\\component\\Doctor\\DoctorAdd\\SelectTimeRange.js",["69","70"],"import React from \"react\";\r\nimport { endOfToday, set } from 'date-fns'\r\nimport TimeRange from 'react-timeline-range-slider'\r\nimport Wrapper from \"../../../hoc/Wrapper/Wrapper\";\r\nimport {Col, Row} from \"react-bootstrap\";\r\n\r\nconst now = new Date()\r\nexport const getTodayAtSpecificHour = (hour = 12) =>\r\n    set(now, { hours: hour, minutes: 0, seconds: 0, milliseconds: 0 })\r\n\r\nexport const getDateAtSpecificHour = (date , hour = 12) =>\r\n    set((date?date:now), { hours: hour, minutes: 0, seconds: 0, milliseconds: 0 })\r\n\r\nconst selectedStart = getTodayAtSpecificHour()\r\nconst selectedEnd = getTodayAtSpecificHour(14)\r\n\r\nconst startTime = getTodayAtSpecificHour(7)\r\nconst endTime = endOfToday()\r\n\r\n\r\n\r\nclass  SelectTimeRange extends React.Component{\r\n\r\n    state = {\r\n        error: false,\r\n        selectedInterval: [selectedStart, selectedEnd],\r\n    }\r\n\r\n\r\n\r\n    errorHandler = ({ error }) => this.setState({ error })\r\n\r\n    onChangeCallback = selectedInterval => {\r\n\r\n        let startTime = selectedInterval[0]\r\n        let endTime = selectedInterval[1]\r\n        console.log(startTime.getHours()+\":\"+startTime.getMinutes());\r\n        console.log('x',selectedInterval)\r\n        this.props.setPart(this.props.id , startTime , endTime , selectedInterval,this.state.error);\r\n\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const {parts} = this.props;\r\n\r\n        let disabledIntervals = parts\r\n        const {  error } = this.state\r\n\r\n        console.log()\r\n        return (\r\n            <Wrapper>\r\n                {/*<Row>*/}\r\n                {/*    <Col style={{textAlign:\"center\"}}>*/}\r\n                {/*        {this.props.date?this.props.date.toLocaleDateString():null}*/}\r\n                {/*    </Col>*/}\r\n                {/*</Row>*/}\r\n                <Row>\r\n                    <Col className={\"text-right\"}>\r\n                        {this.props.selectedInterval?this.props.selectedInterval.start?this.props.selectedInterval.start.toLocaleString():null:null}\r\n\r\n                    </Col>\r\n\r\n                    <Col className={\"text-left\"}>\r\n                        {this.props.selectedInterval?this.props.selectedInterval.end?this.props.selectedInterval.end.toLocaleString():null:null}\r\n\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <TimeRange\r\n                        error={error}\r\n                        ticksNumber={72}\r\n                        // selectedInterval={this.props.selectedInterval}\r\n                        timelineInterval={[getDateAtSpecificHour(this.props.date,7), getDateAtSpecificHour(this.props.date,24)]}\r\n                        onUpdateCallback={this.errorHandler}\r\n                        onChangeCallback={this.onChangeCallback}\r\n                        disabledIntervals={disabledIntervals}\r\n                    />\r\n                </Row>\r\n            </Wrapper>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default SelectTimeRange;","D:\\react\\doctor-frontend\\src\\component\\Doctor\\DoctorAdd\\DoctorAdd.js",["71","72","73","74","75","76"],"import React from 'react'\r\nimport {Button, ButtonGroup, Container, Form,} from \"react-bootstrap\";\r\nimport {SingleDatePicker} from \"react-dates/esm\";\r\nimport SelectTimeRange from \"./SelectTimeRange\";\r\nimport Wrapper from \"../../../hoc/Wrapper/Wrapper\";\r\nimport axios from \"../../../services/AxoisOrder/AxoisOrder\";\r\nimport {toast} from \"react-toastify\";\r\n\r\nconst DoctorAdd = props => {\r\n\r\n    const [timeZone, setTimeZone] = React.useState(null);\r\n    const [value, onChange] = React.useState(null);\r\n    const [datepickerFocus, setDatePickerFocus] = React.useState(false)\r\n\r\n    const [state, setState] = React.useState({\r\n        parts: [],\r\n        partsValue: [],\r\n        countPart: 1\r\n    });\r\n\r\n\r\n    React.useEffect(() => {\r\n        const timezoneOffset = (new Date()).getTimezoneOffset();\r\n        setTimeZone((timezoneOffset / 60) * -1);\r\n    }, []);\r\n\r\n    function setPart(id, start, end, selectedInterval, error,) {\r\n        let partTime = {key: id, start: start, end: end, error: error}\r\n        let partsNew = state.parts.filter(item => item.key != id);\r\n\r\n\r\n        setState({\r\n            ...state,\r\n            parts: [\r\n                ...partsNew,\r\n                partTime\r\n            ]\r\n        })\r\n    }\r\n\r\n    function sendRequest()\r\n    {\r\n        axios.post('/api/doctor/calender/add',{\r\n            params: {\r\n                appointment_date_at: value,\r\n                time_zone : timeZone,\r\n                timeSelect : state.parts\r\n            }\r\n        }).then(res => {\r\n            console.log(res.data.status)\r\n            if(res.data.status == 'success')\r\n            {\r\n                toast.success('Success Submit', {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });\r\n            }\r\n        }).catch(error => {\r\n            toast.error('Error ',{\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    return <Wrapper>\r\n        <Container className={\"pt-3\"}>\r\n            <Form>\r\n                <Form.Group>\r\n                    <Form.Label>TimeZone</Form.Label>\r\n                    <Form.Control type={\"text\"} placeholder={\"Time Zone\"}\r\n                                  value={\"UTC \" + (timeZone > 0 ? \"+\" : \"-\") + timeZone}/>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Label>Token Doctor</Form.Label>\r\n                    <Form.Control type={\"text\"} placeholder={\"Token\"}/>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Label>Date</Form.Label>\r\n                    <SingleDatePicker\r\n                        id=\"date_input\"\r\n                        date={value}\r\n                        focused={datepickerFocus}\r\n                        onDateChange={(value) => {\r\n                            console.log(value._d)\r\n                            onChange(value)\r\n                            setState({\r\n                                countPart: 1,\r\n                                parts: []\r\n                            })\r\n                        }}\r\n                        onFocusChange={(e) => {\r\n                            console.log(e)\r\n                            setDatePickerFocus(e.focused)\r\n                        }}\r\n                    />\r\n                    {/*<Form.Control type={\"text\"} placeholder={\"Date\"} />*/}\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <ButtonGroup>\r\n                        <Button\r\n                            disabled={(!value)}\r\n                            onClick={() => {\r\n                                let d = state.parts.find(item => item.key == state.countPart - 1)\r\n\r\n                                if (!d)\r\n                                    alert('select time')\r\n                                else if (d.error)\r\n                                    alert('error')\r\n                                else\r\n                                    setState({\r\n                                        ...state,\r\n                                        countPart: state.countPart + 1\r\n                                    })\r\n                            }}>Plus</Button>\r\n                        <Button\r\n                            disabled={(!value)}\r\n                            onClick={() => {\r\n                                setState({\r\n                                    ...state,\r\n                                    parts: state.parts.filter(item => item.key != state.countPart - 1),\r\n                                    countPart: state.countPart - 1\r\n                                })\r\n                            }}>Minus</Button>\r\n                    </ButtonGroup>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    {Array(state.countPart).fill(0).map((item, index) => {\r\n\r\n                        // let find = state.parts.find(item => item.key == index)\r\n\r\n                        return <div style={{position: \"relative\" , zIndex:'-1 !important'}}>\r\n                            {(state.countPart > index + 1 || !value) ?\r\n                                <div style={{\r\n                                    position: \"absolute\",\r\n                                    width: \"100%\",\r\n                                    height: \"100%\",\r\n                                    zIndex: 1000,\r\n                                    backgroundColor: \"white\",\r\n                                    opacity: \"0.3\"\r\n                                }}>\r\n\r\n                                </div>\r\n                                : null}\r\n                            <SelectTimeRange\r\n                                date={value ? value._d : null}\r\n                                parts={state.parts.filter(item => item.key != index)}\r\n                                id={index}\r\n                                setPart={setPart}\r\n                                selectedInterval={state.parts.find(item => item.key == index)}\r\n                            />\r\n                        </div>\r\n                    })}\r\n\r\n\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Button onClick={sendRequest}>\r\n                        Submit Time\r\n                    </Button>\r\n                </Form.Group>\r\n\r\n\r\n            </Form>\r\n        </Container>\r\n    </Wrapper>\r\n}\r\n\r\nexport default DoctorAdd;","D:\\react\\doctor-frontend\\src\\reportWebVitals.js",[],"D:\\react\\doctor-frontend\\src\\services\\AxoisOrder\\AxoisOrder.js",[],"D:\\react\\doctor-frontend\\src\\services\\AxoisOrder\\AxoisOrderWithAuth.js",[],"D:\\react\\doctor-frontend\\src\\component\\Patient\\PatientSelect\\PatientSelectDoctor.js",["77","78","79","80","81"],"D:\\react\\doctor-frontend\\src\\component\\Patient\\PatientSelect\\PatientSelectTime.js",["82"],{"ruleId":"83","severity":1,"message":"84","line":1,"column":8,"nodeType":"85","messageId":"86","endLine":1,"endColumn":12},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"83","severity":1,"message":"91","line":17,"column":7,"nodeType":"85","messageId":"86","endLine":17,"endColumn":16},{"ruleId":"83","severity":1,"message":"92","line":18,"column":7,"nodeType":"85","messageId":"86","endLine":18,"endColumn":14},{"ruleId":"93","severity":1,"message":"94","line":29,"column":60,"nodeType":"95","messageId":"96","endLine":29,"endColumn":62},{"ruleId":"93","severity":1,"message":"97","line":51,"column":32,"nodeType":"95","messageId":"96","endLine":51,"endColumn":34},{"ruleId":"93","severity":1,"message":"97","line":119,"column":75,"nodeType":"95","messageId":"96","endLine":119,"endColumn":77},{"ruleId":"93","severity":1,"message":"94","line":136,"column":80,"nodeType":"95","messageId":"96","endLine":136,"endColumn":82},{"ruleId":"93","severity":1,"message":"94","line":162,"column":76,"nodeType":"95","messageId":"96","endLine":162,"endColumn":78},{"ruleId":"93","severity":1,"message":"97","line":165,"column":85,"nodeType":"95","messageId":"96","endLine":165,"endColumn":87},{"ruleId":"83","severity":1,"message":"98","line":4,"column":20,"nodeType":"85","messageId":"86","endLine":4,"endColumn":29},{"ruleId":"93","severity":1,"message":"97","line":71,"column":56,"nodeType":"95","messageId":"96","endLine":71,"endColumn":58},{"ruleId":"83","severity":1,"message":"99","line":111,"column":17,"nodeType":"85","messageId":"86","endLine":111,"endColumn":21},{"ruleId":"93","severity":1,"message":"97","line":112,"column":51,"nodeType":"95","messageId":"96","endLine":112,"endColumn":53},{"ruleId":"93","severity":1,"message":"97","line":119,"column":30,"nodeType":"95","messageId":"96","endLine":119,"endColumn":32},{"ruleId":"100","severity":1,"message":"101","line":6,"column":5,"nodeType":"102","messageId":"103","endLine":9,"endColumn":6},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","no-native-reassign",["104"],"no-negated-in-lhs",["105"],"'startTime' is assigned a value but never used.","'endTime' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'Container' is defined but never used.","'data' is assigned a value but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]